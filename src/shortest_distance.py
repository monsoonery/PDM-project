import numpy as np
import locale

"""This file calculates the distance value of a given list of configurations. 
It is not used by main.py, only for generating "shortest path distance" results in the report.
"""

locale.setlocale(locale.LC_NUMERIC, "en_NL.UTF-8")
def get_distance_of_two_nodes(node_1, node_2):
        x1, y1, q1_node1, q2_node1, q3_node1 = node_1
        x2, y2, q1_node2, q2_node2, q3_node2 = node_2
        
        distance_xy = np.sqrt((x2-x1)**2+(y2-y1)**2)
        diff_list = [abs(q1_node1-q1_node2), abs(q2_node1-q2_node2), abs(q3_node1-q3_node2)]

        # shift angle differences to be between -pi and pi
        for i in range(len(diff_list)):
            if -0.5*np.pi <= diff_list[i] <= 0.5*np.pi:
                #print(f"{diff_list[i]} is between -90 and 90")
                diff_list[i] = diff_list[i]
            elif diff_list[i] > 0.5*np.pi:
                #print(f"{diff_list[i]} is higher than 90")
                diff_list[i] = diff_list[i] - np.pi
            elif diff_list[i] < -0.5*np.pi:
                #print(f"{diff_list[i]} is lower than -90")
                diff_list[i] = diff_list[i] + np.pi
                
            #uncomment for radians:
            diff_list[i] = diff_list[i] * (np.pi/180)

        distance_q1_q2 = distance_xy + sum(diff_list)
        return distance_q1_q2

if __name__ == "__main__":
    initial_config = [-9.5, -9.5, 0, 0, 0]

    Results = [[-9.08278736852023, -8.231693674162836, 1.6523252012573124, 0.6044554547485981, -0.6565860004074262], [-8.614734067221175, -5.384930634822134, 3.5898732716695263, 1.1478341309609532, -1.4174383044597016], [-8.062126587371196, -3.4704103092499956, 1.9078137097063126, -0.11581468503924519, 1.0574971796051638], [-7.69526396418062, -1.3140742960245522, 5.021848416697328, 0.06349438439395594, -0.3875148492145437], [-5.823173462746916, -0.1959713085733359, 1.406640082700478, 1.406211249026561, 2.0020832795194337], [-4.283344169466448, 0.6541662758514786, 2.989462479455691, -0.9046862046264375, -0.9005110398479652], [-3.1227264527031684, 1.335243512211182, 5.05504687390027, 0.3716227019018119, 1.3862362550781562], [-1.7396911097497183, 2.8887130303745074, 4.828458160448168, -1.5446127708557618, 0.23609931914879434], [-0.44046747280560083, 4.199558921292912, 2.5508502564744786, -0.8264032414849289, 0.4980679074846428], [0.7824656571521817, 5.523408797728717, 2.5103709887842576, -1.0361616364698634, 0.8951501659474115], [2.6159104911221753, 7.0098671413559295, 5.591114749983021, 0.5318848709128776, 0.34465377167277866], [3.9909497298991266, 8.557614983872508, 0.5264034932678671, -1.2572009248839662, 1.1267790403406606], [5.133878438137534, 8.607135481689625, 0.1482823286718116, -1.3514104092315078, -1.6171760008509921], [7.164340153253935, 9.243589768064616, 0.8205645451526684, 0.6949437334656836, -1.7105545486814422]]
    print(np.array(Results)-np.array([[-9.08278736852023, -8.231693674162836, 1.6523252012573124, 0.6044554547485981, -0.6565860004074262], [-8.614734067221175, -5.384930634822134, 3.5898732716695263, 1.1478341309609532, -1.4174383044597016], [-8.062126587371196, -3.4704103092499956, 1.9078137097063126, -0.11581468503924519, 1.0574971796051638], [-7.69526396418062, -1.3140742960245522, 5.021848416697328, 0.06349438439395594, -0.3875148492145437], [-5.823173462746916, -0.1959713085733359, 1.406640082700478, 1.406211249026561, 2.0020832795194337], [-4.283344169466448, 0.6541662758514786, 2.989462479455691, -0.9046862046264375, -0.9005110398479652], [-3.1227264527031684, 1.335243512211182, 5.05504687390027, 0.3716227019018119, 1.3862362550781562], [-1.7396911097497183, 2.8887130303745074, 4.828458160448168, -1.5446127708557618, 0.23609931914879434], [-0.44046747280560083, 4.199558921292912, 2.5508502564744786, -0.8264032414849289, 0.4980679074846428], [0.7824656571521817, 5.523408797728717, 2.5103709887842576, -1.0361616364698634, 0.8951501659474115], [2.6159104911221753, 7.0098671413559295, 5.591114749983021, 0.5318848709128776, 0.34465377167277866], [3.9909497298991266, 8.557614983872508, 0.5264034932678671, -1.2572009248839662, 1.1267790403406606], [5.133878438137534, 8.607135481689625, 0.1482823286718116, -1.3514104092315078, -1.6171760008509921], [7.164340153253935, 9.243589768064616, 0.8205645451526684, 0.6949437334656836, -1.7105545486814422]]))

    Results.insert(0, initial_config)

    shortest_path = 0

    for index in range(len(Results)-1):
        distance_between_nodes = get_distance_of_two_nodes(Results[index],Results[index+1])
        shortest_path += distance_between_nodes

    print(shortest_path)
    print(f"Position\t{str(shortest_path).replace('.',',')}")
